// src/features/clients/ClientsPage.jsx
import { useState, useMemo } from "react";
import {
  useGetClientsQuery,
  useAddClientMutation,
  useUpdateClientMutation,
  useDeleteClientMutation,
  useDeleteClientsMutation,
  useSyncClientsMutation,
} from "../clients/clientsApi";
import { useSendToClientsMutation } from "../messages/messagesApi";
import AddClientDrawer from "./AddClientDrawer";
import ConfirmDialog from "../../components/ConfirmDialog";
import SendDialog from "../../components/SendDialog";
import { UseToast } from "../../components/UseToast";

const ClientsPage = () => {
  // ✅ State
  const [isDrawerOpen, setIsDrawerOpen] = useState(false);
  const [editingClient, setEditingClient] = useState(null);

  const [confirmOpen, setConfirmOpen] = useState(false);
  const [confirmAction, setConfirmAction] = useState(null);
  const [confirmMessage, setConfirmMessage] = useState("");

  const [sendOpen, setSendOpen] = useState(false);
  const [sendClientIds, setSendClientIds] = useState([]);

  const { data: clients = [], isLoading } = useGetClientsQuery();
  const [addClient] = useAddClientMutation();
  const [updateClient] = useUpdateClientMutation();
  const [deleteClient] = useDeleteClientMutation();
  const [deleteClients] = useDeleteClientsMutation();
  const [sendToClients] = useSendToClientsMutation();
  const [syncClients, { isLoading: isSyncing }] = useSyncClientsMutation();

  const { showToast, Toast } = UseToast();

  // ✅ Selection
  const [selectedIds, setSelectedIds] = useState([]);
  const [allSelected, setAllSelected] = useState(false);

  const toggleSelection = (id) => {
    setSelectedIds((prev) =>
      prev.includes(id) ? prev.filter((x) => x !== id) : [...prev, id]
    );
  };

  const handleSelectAllPage = (checked, pageClients) => {
    if (checked) {
      const newIds = [
        ...new Set([...selectedIds, ...pageClients.map((c) => c.id)]),
      ];
      setSelectedIds(newIds);
    } else {
      const newIds = selectedIds.filter(
        (id) => !pageClients.find((c) => c.id === id)
      );
      setSelectedIds(newIds);
      setAllSelected(false);
    }
  };

  const handleSelectAllAcrossPages = () => {
    setSelectedIds(clients.map((c) => c.id));
    setAllSelected(true);
  };

  const clearAllSelection = () => {
    setSelectedIds([]);
    setAllSelected(false);
  };

  // ✅ Billing toggle
  const [showBillingOnly, setShowBillingOnly] = useState(false);

  // ✅ Search + Billing filter
  const [searchTerm, setSearchTerm] = useState("");
  const filteredClients = useMemo(() => {
    let result = clients;

    if (showBillingOnly) {
      result = result.filter((c) => c.due_date || c.status);
    }

    if (searchTerm) {
      result = result.filter(
        (c) =>
          c.name?.toLowerCase().includes(searchTerm.toLowerCase()) ||
          c.messenger_id?.toLowerCase().includes(searchTerm.toLowerCase()) ||
          c.group_name?.toLowerCase().includes(searchTerm.toLowerCase()) ||
          c.connection_name?.toLowerCase().includes(searchTerm.toLowerCase())
      );
    }

    return result;
  }, [clients, searchTerm, showBillingOnly]);

  // ✅ Pagination
  const [currentPage, setCurrentPage] = useState(1);
  const pageSize = 7;
  const totalPages = Math.ceil(filteredClients.length / pageSize) || 1;

  const paginatedClients = filteredClients.slice(
    (currentPage - 1) * pageSize,
    currentPage * pageSize
  );

  const handleSearch = (value) => {
    setSearchTerm(value);
    setCurrentPage(1);
  };

  // ✅ Save client
  const handleSaveClient = async (clientData) => {
    try {
      if (!clientData.group_name) {
        clientData.group_name = "G1";
      }
      if (!clientData.connection_name) {
        clientData.connection_name = null;
      }

      if (editingClient) {
        await updateClient({ id: editingClient.id, ...clientData }).unwrap();
        showToast("Client updated ✅");
      } else {
        await addClient(clientData).unwrap();
        showToast("Client added ✅");
      }
      setIsDrawerOpen(false);
      setEditingClient(null);
    } catch (err) {
      console.error("Save failed:", err);
      showToast(err?.data?.detail || "Something went wrong ❌", "error");
    }
  };

  // ✅ Delete single
  const handleDeleteClient = (id) => {
    setConfirmMessage("Are you sure you want to delete this client?");
    setConfirmAction(() => async () => {
      try {
        await deleteClient(id).unwrap();
        showToast("Client deleted ✅");
        return true;
      } catch {
        showToast("Failed to delete ❌", "error");
        return false;
      }
    });
    setConfirmOpen(true);
  };

  // ✅ Bulk delete
  const handleBulkDelete = () => {
    if (selectedIds.length === 0) return;
    setConfirmMessage(
      `Are you sure you want to delete ${selectedIds.length} clients?`
    );
    setConfirmAction(() => async () => {
      try {
        await deleteClients(selectedIds).unwrap();
        showToast(`Deleted ${selectedIds.length} clients ✅`);
        clearAllSelection();
        return true;
      } catch {
        showToast("Failed to delete ❌", "error");
        return false;
      }
    });
    setConfirmOpen(true);
  };

  // ✅ Send
  const handleOpenSend = () => {
    if (selectedIds.length === 0) return;
    setSendClientIds(selectedIds);
    setSendOpen(true);
  };

  const handleSend = async (templateId) => {
    try {
      const numericIds = sendClientIds.map((id) => Number(id));
      await sendToClients({
        template_id: templateId,
        client_ids: numericIds,
      }).unwrap();

      showToast("Messages sent successfully!");
      setSendOpen(false);
      setSendClientIds([]);
    } catch (error) {
      console.error("Send error:", error);
      showToast("Failed to send messages", "error");
    }
  };

  // ✅ Sync
  const handleSyncClients = async () => {
    try {
      await syncClients().unwrap();
      showToast("✅ Clients synced successfully");
    } catch {
      showToast("❌ Failed to sync clients", "error");
    }
  };

  return (
    <div className="p-4 max-w-6xl mx-auto pb-28">
      {/* ✅ Search */}
      <div className="mb-6">
        <div className="flex items-center bg-gray-100 rounded-lg px-3 py-2 shadow-sm">
          <svg
            className="w-5 h-5 text-gray-500"
            fill="none"
            stroke="currentColor"
            viewBox="0 0 24 24"
          >
            <path
              strokeLinecap="round"
              strokeLinejoin="round"
              strokeWidth="2"
              d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"
            />
          </svg>
          <input
            type="text"
            placeholder="Search clients..."
            value={searchTerm}
            onChange={(e) => handleSearch(e.target.value)}
            className="flex-1 bg-transparent outline-none px-2"
          />
          {searchTerm && (
            <button
              onClick={() => handleSearch("")}
              className="text-gray-400 hover:text-gray-600"
            >
              ✕
            </button>
          )}
        </div>
      </div>

      {/* ✅ Toolbar (Desktop) */}
      <div className="hidden sm:flex justify-between items-center mb-4">
        <div className="space-x-2 flex items-center">
          <button
            onClick={handleBulkDelete}
            disabled={selectedIds.length === 0}
            className={`px-4 py-2 rounded ${
              selectedIds.length === 0
                ? "bg-gray-300 text-gray-600 cursor-not-allowed"
                : "bg-red-600 text-white hover:bg-red-700"
            }`}
          >
            🗑 Delete {selectedIds.length > 0 && `(${selectedIds.length})`}
          </button>
          <button
            onClick={handleOpenSend}
            disabled={selectedIds.length === 0}
            className={`px-4 py-2 rounded ${
              selectedIds.length === 0
                ? "bg-gray-300 text-gray-600 cursor-not-allowed"
                : "bg-green-600 text-white hover:bg-green-700"
            }`}
          >
            📤 Send {selectedIds.length > 0 && `(${selectedIds.length})`}
          </button>
          <button
            onClick={handleSyncClients}
            disabled={isSyncing}
            className="px-4 py-2 rounded bg-purple-600 text-white hover:bg-purple-700"
          >
            {isSyncing ? "⏳ Syncing..." : "🔄 Sync Clients"}
          </button>

          {/* ✅ Billing Toggle */}
          <button
            onClick={() => setShowBillingOnly((prev) => !prev)}
            className={`px-4 py-2 rounded ${
              showBillingOnly
                ? "bg-indigo-600 text-white hover:bg-indigo-700"
                : "bg-gray-200 text-gray-700 hover:bg-gray-300"
            }`}
          >
            {showBillingOnly ? "👁 Show All" : "💳 Billing Only"}
          </button>

          {/* ✅ Select Across Pages */}
          {selectedIds.length > 0 && !allSelected && (
            <button
              onClick={handleSelectAllAcrossPages}
              className="px-3 py-2 text-sm bg-gray-200 rounded hover:bg-gray-300"
            >
              Select all {clients.length} clients
            </button>
          )}
          {allSelected && (
            <button
              onClick={clearAllSelection}
              className="px-3 py-2 text-sm bg-gray-200 rounded hover:bg-gray-300"
            >
              Clear selection
            </button>
          )}
        </div>
        <button
          onClick={() => {
            setEditingClient(null);
            setIsDrawerOpen(true);
          }}
          className="px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700"
        >
          ➕ Add Client
        </button>
      </div>

      {/* ✅ Desktop Table */}
      {/* ... rest of your table + mobile code remains unchanged ... */}

      {/* ✅ Mobile Toolbar + Select All */}
      <div className="sm:hidden flex flex-col gap-3 mb-4">
        <div className="flex justify-between items-center">
          <button
            onClick={handleBulkDelete}
            disabled={selectedIds.length === 0}
            className={`px-3 py-2 rounded text-sm ${
              selectedIds.length === 0
                ? "bg-gray-300 text-gray-600 cursor-not-allowed"
                : "bg-red-600 text-white hover:bg-red-700"
            }`}
          >
            🗑 Delete {selectedIds.length > 0 && `(${selectedIds.length})`}
          </button>
          <button
            onClick={handleOpenSend}
            disabled={selectedIds.length === 0}
            className={`px-3 py-2 rounded text-sm ${
              selectedIds.length === 0
                ? "bg-gray-300 text-gray-600 cursor-not-allowed"
                : "bg-green-600 text-white hover:bg-green-700"
            }`}
          >
            📤 Send
          </button>
        </div>

        {/* ✅ Billing Toggle (Mobile) */}
        <button
          onClick={() => setShowBillingOnly((prev) => !prev)}
          className={`px-3 py-2 rounded text-sm ${
            showBillingOnly
              ? "bg-indigo-600 text-white hover:bg-indigo-700"
              : "bg-gray-200 text-gray-700 hover:bg-gray-300"
          }`}
        >
          {showBillingOnly ? "👁 Show All" : "💳 Billing Only"}
        </button>

        {/* ✅ Select All */}
        <div className="flex items-center gap-2 bg-gray-100 px-3 py-2 rounded shadow-sm">
          <input
            type="checkbox"
            checked={
              paginatedClients.every((c) => selectedIds.includes(c.id)) &&
              paginatedClients.length > 0
            }
            onChange={(e) =>
              handleSelectAllPage(e.target.checked, paginatedClients)
            }
            className="w-4 h-4"
          />
          <span className="text-sm text-gray-700">Select all on this page</span>
        </div>

        {selectedIds.length > 0 && !allSelected && (
          <button
            onClick={handleSelectAllAcrossPages}
            className="px-3 py-2 text-sm bg-gray-200 rounded hover:bg-gray-300"
          >
            Select all {clients.length} clients
          </button>
        )}
        {allSelected && (
          <button
            onClick={clearAllSelection}
            className="px-3 py-2 text-sm bg-gray-200 rounded hover:bg-gray-300"
          >
            Clear selection
          </button>
        )}
      </div>

      {/* ... rest of your component unchanged ... */}

      <Toast />
    </div>
  );
};

export default ClientsPage;
